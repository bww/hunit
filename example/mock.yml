
# A mock endpoint that will respond for: `GET /projects/*/detail`
- 
  # This is the endpoint we will respond for
  endpoint:
    # The HTTP methods to accept. You can specify as many as you like.
    methods:
      - GET
    # The path to match for this endpoint. You can use the  wildcards
    # '*' to match a whole path component and '?' to match a single
    # non-slash character. The full details of path matching are
    # described here: https://golang.org/pkg/path/#Match
    path: /projects/*/detail
    # We can require that arbitrary headers are set in order for the
    # request to match this endpoint.
    headers:
      Origin: localhost
  
  # This is the response we send back
  response:
    # The status code sent in our response.
    status: 200
    # Headers sent in our response.
    headers:
      Content-Type: application/json; charset=utf-8
    # The entity to send in response
    entity: |
      {
        "color": "blue",
        "height": 100,
        "width": 50,
        "depth": 475,
        "in_stock": true
      }

# This one will respond for: `GET /users/*?pretty=true`
- 
  endpoint:
    methods:
      - GET
    # The path to match for this endpoint. We can require that certain
    # parameters are matched in order to match this path. If the patch
    # matches but the query string does not, we'll get a 404.
    path: /users/*?pretty=true
  
  # This is the response we send back
  response:
    status: 200
    headers:
      Content-Type: application/json; charset=utf-8
    entity: |
      {
        "name": "Joe Blow"
      }
